import json
import random
from datetime import datetime
from pathlib import Path
from pytrends.request import TrendReq
from openai import OpenAI

pytrends = TrendReq(hl="en-US", tz=360)
openai = OpenAI()

OUTPUT_DIR = Path("frontend/blogs/")
INDEX_PATH = Path("frontend/blog.html")

DEFAULT_KEYWORDS = [
    "merchant services",
    "credit card processing",
    "cash discount program",
    "interchange fees",
    "point of sale AI",
    "switch from Square",
    "AI for small business",
    "cut payment fees"
]

def fetch_trending_keywords():
    try:
        pytrends.build_payload(["merchant services", "credit card fees", "cash discount"], timeframe="now 7-d")
        related = pytrends.related_queries()
        all_keywords = []
        for topic in related.values():
            if topic and "top" in topic and topic["top"] is not None:
                all_keywords.extend(topic["top"]["query"].tolist())
        if not all_keywords:
            print("⚠️ No related keywords found. Using fallback.")
            return DEFAULT_KEYWORDS
        print("✅ Trending keywords fetched.")
        return all_keywords
    except Exception as e:
        print(f"⚠️ Error fetching trends: {e}. Using fallback.")
        return DEFAULT_KEYWORDS

def generate_blog_title(topic):
    return f"{topic.title()} Trends for Small Business Merchants in {datetime.now().year}"

def generate_blog_content(topic):
    prompt = (
        f"Write a short, engaging blog post (3-4 paragraphs) about '{topic}' "
        "focused on small business owners, AI tools, payment processing, or merchant savings. "
        "Include real-world tone and helpful info. No fluff."
    )
    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

def save_blog(title, content, topic):
    date_str = datetime.now().strftime("%Y-%m-%d")
    filename = f"{date_str}-{topic.replace(' ', '-')}.html".lower()
    filepath = OUTPUT_DIR / filename
    with open(filepath, "w") as f:
        f.write(f"<html><head><title>{title}</title></head><body><h1>{title}</h1><p>{content}</p></body></html>")
    return filename, content.split(".")[0] + "."

def update_index(filename, title, summary):
    with open(INDEX_PATH, "r") as f:
        index = f.read()
    new_entry = f"""
    <div class="blog-entry">
      <a href="blogs/{filename}">{title}</a>
      <p>{summary}</p>
    </div>
    """
    if "<!-- BLOG_ENTRIES -->" in index:
        index = index.replace("<!-- BLOG_ENTRIES -->", new_entry + "\n<!-- BLOG_ENTRIES -->")
    else:
        index = new_entry + "\n" + index
    with open(INDEX_PATH, "w") as f:
        f.write(index)

def main():
    keywords = fetch_trending_keywords()
    topic = random.choice(keywords)
    print(f"Generating blog for topic: {topic}")
    title = generate_blog_title(topic)
    content = generate_blog_content(topic)
    filename, summary = save_blog(title, content, topic)
    update_index(filename, title, summary)
    print(f"✅ Blog generated and saved: {filename}")

if __name__ == "__main__":
    main()
