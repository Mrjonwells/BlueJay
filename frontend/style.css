import os
import random
from datetime import datetime
from pytrends.request import TrendReq
from openai import OpenAI
from pathlib import Path

openai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

BLOGS_DIR = Path("frontend/blogs")
INDEX_FILE = Path("frontend/blog.html")

def fetch_trending_keywords():
    pytrends = TrendReq(hl='en-US', tz=360)
    kw_list = ["merchant services", "credit card fees", "cash discount"]
    pytrends.build_payload(kw_list, timeframe="now 7-d")

    try:
        related = pytrends.related_queries()
        keywords = []
        for kw in kw_list:
            top_data = related.get(kw, {}).get('top', {})
            if 'query' in top_data:
                keywords.extend(top_data['query'])
        return keywords[:10] if keywords else ["merchant processing", "card fees", "cash discount program"]
    except Exception as e:
        print("Pytrends failed, using defaults:", e)
        return ["merchant processing", "card fees", "cash discount program"]

def generate_blog_post(topic):
    system_prompt = f"You are BlueJay, a helpful and modern AI. Write a blog post about '{topic}' that helps small business owners understand it. Make it friendly, informative, and SEO optimized."

    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Write a blog post on: {topic}"}
        ]
    )
    return response.choices[0].message.content.strip()

def create_blog_file(title, body):
    now = datetime.now()
    filename = f"{now.strftime('%Y-%m-%d')}-{title.lower().replace(' ', '-')}.html"
    filepath = BLOGS_DIR / filename

    BLOGS_DIR.mkdir(parents=True, exist_ok=True)

    with open(filepath, "w") as f:
        f.write(f"<html><head><title>{title}</title></head><body>")
        f.write(f"<h1>{title}</h1>\n")
        f.write(f"<p><em>{now.strftime('%B %d, %Y')}</em></p>\n")
        f.write(body.replace("\n", "<br>\n"))
        f.write("</body></html>")

    return filename, title, now.strftime("%B %d, %Y"), body[:160]

def update_blog_index(entry):
    filename, title, date_str, preview = entry
    if not INDEX_FILE.exists():
        with open(INDEX_FILE, "w") as f:
            f.write("<html><head><title>BlueJay Blog</title></head><body><h1>BlueJayâ€™s Blog</h1><div id='posts'>\n")

    with open(INDEX_FILE, "r") as f:
        content = f.read()

    new_post_html = f"""
<div class="blog-preview">
  <a href="blogs/{filename}">{title}</a><br>
  <small>{date_str}</small>
  <p>{preview}...</p>
</div>
"""
    if "<div id='posts'>" in content:
        content = content.replace("<div id='posts'>", f"<div id='posts'>\n{new_post_html}")
    else:
        content += f"\n{new_post_html}"

    with open(INDEX_FILE, "w") as f:
        f.write(content)

def main():
    keywords = fetch_trending_keywords()
    topic = random.choice(keywords)
    print("Generating blog on:", topic)

    blog_body = generate_blog_post(topic)
    blog_data = create_blog_file(topic.title(), blog_body)
    update_blog_index(blog_data)
    print("Blog created and indexed.")

if __name__ == "__main__":
    main()
